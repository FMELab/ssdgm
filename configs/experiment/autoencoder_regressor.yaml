# @package _global_

# to execute this experiment run:
# python run.py experiment=autoencoder_regressor.yaml

defaults:
  - override /mode: exp.yaml
  - override /trainer: null
  - override /model: null
  - override /datamodule: null
  - override /callbacks: null
  - override /logger: null

name: "autoencoder_regressor"

seed: 42

trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0
  min_epochs: 1
  max_epochs: 100
  gradient_clip_val: 0.5
  accumulate_grad_batches: 2
  weights_summary: "full"
  num_sanity_val_steps: 0

model:  
  _target_: src.models.autoencoder_regressor.AutoencoderRegressor
  checkpoint_path: /home/flo/ssdgm/logs/experiments/autoencoder/runs/2022-02-17/14-07-43/checkpoints/epoch_015.ckpt
  regressor:
    _target_: src.models.modules.dense.Fcn
    in_features: 4
    hidden_features: [16] 
    out_features: 1 

datamodule:
  _target_: src.datamodules.skillcraft_datamodule.SkillcraftDataModule
  data_dir: ${data_dir} # data_dir is specified in config.yaml
  batch_size: 64
  split_mode: "relative"
  split:
    - 0.8
    - 0.05
    - 0.9
  num_workers: 0
  pin_memory: False

callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: "val/MSE" # name of the logged metric which determines when model is improving
    mode: "min" # "max" means higher metric value is better, can be also "min"
    save_top_k: 1 # save k best models (determined by above metric)
    save_last: True # additionaly always save model from last epoch
    verbose: False
    dirpath: "checkpoints/"
    filename: "epoch_{epoch:03d}"
    auto_insert_metric_name: False

  early_stopping:
    _target_: pytorch_lightning.callbacks.EarlyStopping
    monitor: "val/MSE" # name of the logged metric which determines when model is improving
    mode: "min" # "max" means higher metric value is better, can be also "min"
    patience: 100 # how many validation epochs of not improving until training stops
    min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement

  rich_progress_bar:
    _target_: pytorch_lightning.callbacks.RichProgressBar

logger:
  wandb:
    _target_: pytorch_lightning.loggers.wandb.WandbLogger
    project: "template-tests"
    name: ${name}/${now:%Y-%m-%d}/${now:%H-%M-%S}
    save_dir: "."
    offline: False
    log_model: false
    prefix: ""
    job_type: "train"
    group: ""
    tags: ["best_model", "skillcraft"]
    notes: "This is an Autoencoder model with attached Regressor model test run."