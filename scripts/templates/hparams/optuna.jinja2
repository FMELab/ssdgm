# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python run.py -m hparams_search=mnist_optuna experiment=example_simple hydra.sweeper.n_trials=30

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
optimized_metric: "val/MSE"

hydra:
  # here we define Optuna hyperparameter search
  # it optimizes for value returned from function with @hydra.main decorator
  # learn more here: https://hydra.cc/docs/next/plugins/optuna_sweeper
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
    storage: null
    study_name: null
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # number of experiments that will be executed
    n_trials: 100

    # choose Optuna hyperparameter sampler
    # learn more here: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      consider_prior: true
      prior_weight: 1.0
      consider_magic_clip: true
      consider_endpoints: false
      n_startup_trials: 10
      n_ei_candidates: 24
      multivariate: false
      warn_independent_sampling: true

    # define range of hyperparameters
    search_space:
      datamodule.batch_size:
        type: categorical
        choices: [64, 128, 256]
      model.leaky_relu_slope:
        type: float
        low: 0.01
        high: 0.20
        step: 0.05
      model.dropout_proba:
       type: float
       low: 0.1
       high: 0.9
       step: 0.1
      model.lr:
        type: float
        low: 1e-5
        high: 1e-2
        log: True
      {%- if model_name == "vae"%}
      model.regularization_loss_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      {%- elif model_name == "probabilistic_predictor" %}
      model.regressor_stddev:
        type: float
        low: 1e-2
        high: 1e0
        log: True
      {%- elif model_name == "m2vae" %}
      model.regressor_loss_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      {%- elif model_name == "srgan" %}
      model.gradient_penalty_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      {%- elif model_name == "semigan" %}
      model.dis_x_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.dis_y_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.dis_xy_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.gen_x_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.gen_y_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.gen_xy_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.translation_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.reconstruction_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.inverse_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.synthesized_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.consistency_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      model.sufficient_inference_epoch:
        type: int
        low: 5
        high: 50
      {%- elif model_name == "ssdkl" %}
      model.variance_loss_multiplier:
        type: float
        low: 1e-3
        high: 1e1
        log: True
      {%- endif -%}
